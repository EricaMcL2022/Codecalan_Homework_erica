---
title: "Matrices and Lists"
output:  html_document:
    
---

# Learning Objectives:
* Know what lists and matrices are.
* Know how to create lists and matrices.
* Be able to do some basic manipulations on lists and matrices.

Some of this lesson will be recap from the pre-coursework. Don't worry if your memory of the pre-coursework is a bit rusty - we'll go over all of it again.

So far in your R journey you have been working with vectors and data frames (tibbles). In this lesson you will learn about two more R data structures: lists and matrices. While these are not as commonly used for data analysis they are very useful to know about. 

# Lists - A list is a special data type in R that acts as a container.
Unlike vectors, the contents of a list are not restricted to a single type. A list can contain any type of R object, including another list!



## Creating lists

We can create a list using the `list()` function, and change another object into a list using the `as.list()` function. 

```{r}

grocery_list <- list("bread", "butter", "milk", "chicken", "catfood") 
                     
                     
x <- list(1, "a", TRUE, c(1, 2, 3))
x
```

```{r}
x <- 1:5  #installs the range 1 to 5 then installs the list!
as.list(x)
```




## Subsetting lists

The contents of elements of a list can be retrieved using double square brackets.

```{r}
x <- list(1, "a", TRUE, c(1, 2, 3))
x[[2]]
```

#If you use a single square bracket you will get a sub-list with the element. #a [[]] you get the element out of it i.e. "a" in the above.

```{r}
x[2]
```

Elements of a list can be named.

```{r}
named_list <- list(a = "I love R", b = 1:10) #we have named the elements of the list 
named_list
```

If your list has names, then elements can be extracted by name using the `$` operator.

```{r}
named_list$a
```

Note that this also works with data frames! 

And we can extract the names of a list using the `names()` function.

```{r}
names(named_list)
```




## Nested lists

Here's an example of a list with elements that are themselves lists:
using 
```{r}
student_info <- list(
                "Agnes" = list(height = 1.8, shoe_size = 8L),
                "Bobby" = list(height = 2.1, gender = "Male"),
                "Charlie" = list(gender = "Female", likes_beets = TRUE)
)

student_info
```

If you want to pull a single entry from a nested named list you can use the `$` twice:

```{r}

student_info$Agnes$height

```
indexes are used when you dont have named lists.

If it was unnamed you could use the item index i.e. Agnes's height is the 1st item in the 1st list:

```{r}
student_info[[1]][[1]]
```

Lists can be extremely useful inside functions. Because functions in R are able to return only a single object, you can “staple” together lots of different kinds of results into a single object that a function can return.

Data frames are actually a special case of lists where all the elements of the list have the same length.

# class = 
**Task - 5 minutes**

1. Make a **named list** that contains a numeric vector and a character vector.

```{r}
dog_list <- list("Sid" = list(height_cm = 0.3, age_mths = 12),"Nova" = list(height_cm = 0.25, age_mths = 12), "Gus" = list(height_cm = 0.23, age_mths = 13), "Nala" = list(height_cm = 0.30, age_mths = 60), "Lola" = list(height_cm = 0.35, age_mths = 36))
dog_list

dog_list[[2]][[2]]

dog_list[2][2]

dog_list$Nova$age_mths

if_statements_function <-  function(x, y){
  
  if ( > y) {
    print("Start of outer if block")
    
    if (x %% y == 0) {
      print("Inner if block 1")
    }
    
    if (y %in% c(1:5)) {
      print("Inner if block 2")
    }
    
    print("End of outer if block")
  }
  
  print("After if statement")
}

```

2. Access the second element of your list using double square brackets `[[]]`. What is its class?

3. Access the second element of your list using single square brackets `[]`. What is its class?

4. Access the second element of your list by name. What is its class?

<details>
<summary>**Solution**</summary>

An example solution.

```{r}
example_list <-
  list(numbers = 1:5, words = c("hello", "yes"))

example_list
```

```{r}
example_list[[2]]
class(example_list[[2]])
```

3.
```{r}
example_list[2]
class(example_list[2])
```

4. 
```{r}
example_list$words
class(example_list$words)
```
</details>
</blockquote>


# Matrices

Both matrices and data frames are 2 dimensional data structures. The main difference between a matrix and a data frame is in a matrix all the entries have to be the same data type (i.e. it is homogeneous), this does not need to be the case for a data frame ((i.e. it can be heterogeneous).

If you have data of all the same type, whether you store it as a data frame or a matrix will depend on what you are doing with the data. Matrices are more memory efficient and are useful if you are implementing an algorithm yourself from scratch (this is rare). For the vast majority of data analysis you would be using data stored as data frames. 

## Creating Matrices

Matrices are made using the function `matrix()`, and have rows and columns. Here's an example of creating a matrix with 2 rows and 2 columns. 

```{r}
matrix(1:4, nrow = 2, ncol = 2)
```

If you wanted it to populate your matrix rowwise rather than columnwise you can add the argument `byrow=TRUE`.

```{r}
matrix(1:4, nrow = 2, ncol = 2, byrow=TRUE)
```

Another example: this time creating a matrix with 2 rows and 3 columns.

```{r}
matrix(1:6, nrow = 2, ncol = 3)
```

Again we can use `class()` to check if an object is a matrix.

```{r}
m <- matrix(1:6, nrow = 2, ncol = 3)
class(m)
```

## Selecting elements in a matrix

You can select data held within a matrix by row number and column number. The first number selects a row:

```{r}
m[1, ]
```

and the second number selects a column:

```{r}
m[, 1]
```

Or you can select a single element from a particular row and column position

```{r}
m[1, 1]
```

You can select multiple rows or columns by listing in a vector.

```{r}
m[, c(1, 3)]
```

Note that all these ways of selecting work with data frames as well! Although the functions provided by `dplyr` are generally easier to use.

## Calculations with matrices

You can multiply, divide, add to and subtract from matrices, just like you can with vectors.

```{r}
m * 3
```

```{r}
m - 2
```


## Working with rows and columns

In matrices you might occasionally need to work with all of the rows or all of the columns at once. For example, you might want to find the sums of each row or the averages of each column. These four functions let you do that:

1. `rowSums()`
2. `colSums()`
3. `rowMeans()`
4. `colMeans()`


```{r}
rowSums(m)
```

```{r}
colSums(m)
```

```{r}
rowMeans(m)
```

```{r}
colMeans(m)
```

**These functions also work on data frames**, so long as all the data in the data frame is `numeric` type.



<blockquote class = 'task'>
**Task - 5 minutes**

1. Make a matrix with 3 rows and 4 columns. Each column should contain the numbers 1 to 3. 



2. Find the element in the 2nd row, 3rd column.

3. Check that all the columns are identical by checking that their sums are the same.

<details>
<summary>**Solution**</summary>

```{r}
m <- matrix(c(1,2,3, 1,2,3, 1,2,3, 1,2,3), nrow = 3, ncol = 4)
m

m <- matrix(rep(1:3,4),nrow=3, ncol=4)

```

2.
```{r}
m[2, 3]  #the average of column2 and column3 remember r = columns first so if you wanted an average of rows 2 and 3 it would be
rowMeans()
```


3.
```{r}
colSums(m)
```



</details>
</blockquote>
